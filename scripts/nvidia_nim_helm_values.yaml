# âœ… REAL: Production Helm Configuration for NIS Protocol with NVIDIA NIM
# This configuration deploys the NIS Protocol with real NVIDIA NIM services

# =============================================================================
# NIS PROTOCOL PRODUCTION DEPLOYMENT
# =============================================================================

# Global configuration
global:
  imageRegistry: "nvcr.io"
  imagePullSecrets:
    - ngc-secret

# =============================================================================
# NVIDIA NIM LLM SERVICE CONFIGURATION
# =============================================================================

# Multi-LLM NIM deployment
nimServices:
  - name: "llama3-8b-instruct"
    enabled: true
    image:
      repository: "nvcr.io/nim/meta/llama3-8b-instruct"
      tag: "1.0.3"
    model:
      name: "meta/llama3-8b-instruct"
      ngcAPISecret: "ngc-api"
    resources:
      limits:
        nvidia.com/gpu: 1
        memory: "32Gi"
      requests:
        nvidia.com/gpu: 1
        memory: "16Gi"
    persistence:
      enabled: true
      size: "50Gi"
      storageClass: "standard"
    service:
      type: "ClusterIP"
      port: 8000
    replicas: 1
    env:
      - name: "NIM_LOG_LEVEL"
        value: "INFO"
      - name: "NIM_ENABLE_OTEL"
        value: "1"
      - name: "NIM_OTEL_SERVICE_NAME"
        value: "nis-protocol-llama3-8b"

  # Optional: Larger model (enable when needed)
  - name: "llama3-70b-instruct"
    enabled: false  # Set to true for larger model deployment
    image:
      repository: "nvcr.io/nim/meta/llama3-70b-instruct"
      tag: "1.0.3"
    model:
      name: "meta/llama3-70b-instruct"
      ngcAPISecret: "ngc-api"
    resources:
      limits:
        nvidia.com/gpu: 4
        memory: "128Gi"
      requests:
        nvidia.com/gpu: 4
        memory: "64Gi"
    persistence:
      enabled: true
      size: "220Gi"
      storageClass: "standard"
    service:
      type: "ClusterIP"
      port: 8001
    replicas: 1
    env:
      - name: "NIM_LOG_LEVEL"
        value: "INFO"
      - name: "NIM_ENABLE_OTEL"
        value: "1"
      - name: "NIM_OTEL_SERVICE_NAME"
        value: "nis-protocol-llama3-70b"

# =============================================================================
# NIS PROTOCOL CORE SERVICES
# =============================================================================

# Main NIS Protocol application
nisProtocol:
  enabled: true
  image:
    repository: "nis-protocol/nis-core"
    tag: "latest"
    pullPolicy: "Always"

  replicas: 1

  # Service configuration
  service:
    type: "ClusterIP"
    port: 8000
    targetPort: 8000

  # Resource allocation
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
    requests:
      cpu: "1000m"
      memory: "2Gi"

  # Environment variables
  env:
    - name: "NIS_ENVIRONMENT"
      value: "production"
    - name: "NIS_LOG_LEVEL"
      value: "INFO"
    - name: "ENABLE_NVIDIA_NIM"
      value: "true"
    - name: "NIM_BASE_URL"
      value: "http://llama3-8b-instruct-nim:8000"
    - name: "ENABLE_REAL_LAPLACE"
      value: "true"
    - name: "ENABLE_REAL_KAN"
      value: "true"
    - name: "ENABLE_REAL_PINN"
      value: "true"
    - name: "ENABLE_TOKEN_EFFICIENCY"
      value: "true"
    - name: "TOKEN_EFFICIENCY_TARGET"
      value: "0.67"
    - name: "AUTONOMOUS_MODE"
      value: "true"
    - name: "PRODUCTION_MODE"
      value: "true"

  # Volume mounts for persistent data
  volumeMounts:
    - name: "nis-data"
      mountPath: "/app/data"
    - name: "nis-logs"
      mountPath: "/app/logs"

  volumes:
    - name: "nis-data"
      persistentVolumeClaim:
        claimName: "nis-protocol-data"
    - name: "nis-logs"
      persistentVolumeClaim:
        claimName: "nis-protocol-logs"

  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: "/health/live"
      port: 8000
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    enabled: true
    httpGet:
      path: "/health/ready"
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

# =============================================================================
# SIGNAL PROCESSING SERVICE
# =============================================================================

signalProcessing:
  enabled: true
  image:
    repository: "nis-protocol/signal-processing"
    tag: "latest"
  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  env:
    - name: "SIGNAL_SAMPLING_RATE"
      value: "44100"
    - name: "ENABLE_REAL_LAPLACE"
      value: "true"

# =============================================================================
# PHYSICS VALIDATION SERVICE
# =============================================================================

physicsValidation:
  enabled: true
  image:
    repository: "nis-protocol/physics-validation"
    tag: "latest"
  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
  env:
    - name: "PHYSICS_VALIDATION_ENABLED"
      value: "true"
    - name: "CONSERVATION_LAW_CHECKING"
      value: "true"

# =============================================================================
# PERSISTENT VOLUME CLAIMS
# =============================================================================

persistence:
  # NIS Protocol data persistence
  nisData:
    enabled: true
    storageClass: "standard"
    accessMode: "ReadWriteOnce"
    size: "10Gi"
    annotations: {}

  # NIS Protocol logs persistence
  nisLogs:
    enabled: true
    storageClass: "standard"
    accessMode: "ReadWriteOnce"
    size: "5Gi"
    annotations: {}

  # Model cache persistence (for NIM)
  modelCache:
    enabled: true
    storageClass: "standard"
    accessMode: "ReadWriteMany"
    size: "100Gi"
    annotations: {}

# =============================================================================
# INGRESS CONFIGURATION
# =============================================================================

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: "nis-protocol.local"
      paths:
        - path: "/"
          pathType: "Prefix"
          backend:
            service:
              name: "nis-protocol"
              port:
                number: 8000
  tls:
    - secretName: "nis-protocol-tls"
      hosts:
        - "nis-protocol.local"

# =============================================================================
# MONITORING AND OBSERVABILITY
# =============================================================================

monitoring:
  enabled: true

  # Prometheus metrics
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: "monitoring"
      labels:
        release: "prometheus"

  # Grafana dashboards
  grafana:
    enabled: true
    dashboards:
      - name: "nis-protocol-performance"
        content: |
          # NIS Protocol Performance Dashboard
          # This dashboard monitors real NVIDIA NIM integration
      - name: "nis-protocol-physics"
        content: |
          # Physics Validation Dashboard
          # Monitors real PINN and KAN performance

  # OpenTelemetry tracing
  otel:
    enabled: true
    collector:
      config:
        receivers:
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:4318
        exporters:
          otlp:
            endpoint: "http://otel-collector.monitoring.svc.cluster.local:4317"
        service:
          pipelines:
            traces:
              receivers: [otlp]
              exporters: [otlp]
            metrics:
              receivers: [otlp]
              exporters: [otlp]

# =============================================================================
# NETWORK POLICIES
# =============================================================================

networkPolicies:
  enabled: true
  nisProtocol:
    podSelector:
      matchLabels:
        app.kubernetes.io/name: "nis-protocol"
    policyTypes:
      - "Ingress"
      - "Egress"
    ingress:
      - from:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: "nim-llm"
        ports:
          - protocol: "TCP"
            port: 8000
    egress:
      - to:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: "nim-llm"
        ports:
          - protocol: "TCP"
            port: 8000

# =============================================================================
# RBAC CONFIGURATION
# =============================================================================

rbac:
  create: true
  serviceAccount:
    create: true
    name: "nis-protocol-sa"
    annotations: {}

  clusterRole:
    create: true
    name: "nis-protocol-role"
    rules:
      - apiGroups: [""]
        resources: ["pods", "services", "endpoints"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "replicasets"]
        verbs: ["get", "list", "watch"]

  clusterRoleBinding:
    create: true
    name: "nis-protocol-binding"

# =============================================================================
# AUTOSCALING CONFIGURATION
# =============================================================================

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

  # Custom metrics for GPU-based scaling
  customMetrics:
    - type: "Resource"
      resource:
        name: "nvidia.com/gpu"
        target:
          type: "AverageValue"
          averageValue: "1"

# =============================================================================
# SECURITY CONTEXT
# =============================================================================

securityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false

# Container security context
containerSecurityContext:
  enabled: true
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - "ALL"

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================
#
# This Helm chart deploys the NIS Protocol with real NVIDIA NIM integration.
#
# Prerequisites:
# 1. Kubernetes cluster with GPU nodes
# 2. NVIDIA GPU Operator installed
# 3. NGC API key configured
# 4. Helm 3 installed
#
# Deployment:
# 1. kubectl create namespace nis-protocol
# 2. kubectl create secret docker-registry ngc-secret --docker-server=nvcr.io --docker-username='$oauthtoken' --docker-password=$NGC_API_KEY
# 3. kubectl create secret generic ngc-api --from-literal=NGC_API_KEY=$NGC_API_KEY
# 4. helm install nis-protocol ./nis-protocol-helm -f scripts/nvidia_nim_helm_values.yaml
#
# Verification:
# 1. kubectl get pods -n nis-protocol
# 2. kubectl logs -f deployment/nis-protocol -n nis-protocol
# 3. kubectl port-forward service/nis-protocol 8000:8000
# 4. curl http://localhost:8000/v1/models
#
# Monitoring:
# - Prometheus: http://prometheus.monitoring.svc.cluster.local:9090
# - Grafana: http://grafana.monitoring.svc.cluster.local:3000
# - OpenTelemetry: http://otel-collector.monitoring.svc.cluster.local:4318
#
# =============================================================================
