[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nis-protocol"
version = "3.2.1"
description = "Neuro-Inspired System Protocol: Autonomous AI framework with physics validation, multi-agent orchestration, and LLM integration"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Organica AI Solutions", email = "contact@organicaai.com"}
]
maintainers = [
    {name = "Organica AI Solutions", email = "contact@organicaai.com"}
]
keywords = [
    "ai", "agi", "multi-agent", "autonomous", "llm", "machine-learning",
    "physics-informed", "kan", "pinn", "neuro-inspired", "langchain",
    "langgraph", "cognitive-architecture", "consciousness", "reasoning",
    "drone", "robotics", "edge-ai", "autonomous-systems"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

[project.urls]
Homepage = "https://www.organicaai.com"
Documentation = "https://github.com/Organica-Ai-Solutions/NIS_Protocol/tree/main/system/docs"
Repository = "https://github.com/Organica-Ai-Solutions/NIS_Protocol"
"Bug Tracker" = "https://github.com/Organica-Ai-Solutions/NIS_Protocol/issues"
Whitepaper = "https://github.com/Organica-Ai-Solutions/NIS_Protocol/blob/main/system/docs/NIS_Protocol_V3_Whitepaper.md"

[project.scripts]
nis-protocol = "nis_protocol.cli:main"
nis-server = "nis_protocol.server:run"
nis-agent = "nis_protocol.agent:run"

[tool.setuptools]
package-dir = {"" = "."}
packages = {find = {where = ["."], include = ["src*", "nis_protocol*"]}}

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.tox
  | build
  | dist
  | __pycache__
)/
'''

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

