{
  "info": {
		"_postman_id": "nis-protocol-v3-complete",
    "name": "NIS Protocol v3 - Complete API Collection",
		"description": "Comprehensive API collection for NIS Protocol v3 including consciousness agents, action agents, third-party protocol integration, and automated audit fixing capabilities.\n\nFeatures:\n- Real LLM Integration (OpenAI, Anthropic, DeepSeek, Google)\n- Consciousness Agent Introspection\n- Action Agent Audit Fixing\n- Third-Party Protocol Integration (MCP, ACP, A2A)\n- Memory Management\n- Tool Execution\n- Real-time Monitoring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "nis-protocol-team",
		"version": {
			"major": 3,
			"minor": 1,
			"patch": 0,
			"identifier": "complete",
			"meta": {
				"updated": "2025-01-19",
				"features": "third-party-protocols"
			}
		}
  },
  "variable": [
    {
			"key": "base_url",
			"value": "http://localhost",
			"description": "Base URL for NIS Protocol API (through Nginx)"
		},
		{
			"key": "direct_url",
      "value": "http://localhost:8000",
			"description": "Direct URL to FastAPI backend"
		},
		{
			"key": "consciousness_agent_id",
			"value": "agent_consciousness_1753654416_e734c5c4",
			"description": "Demo consciousness agent ID"
		},
		{
			"key": "action_agent_id",
			"value": "agent_action_1753654416_xyz789",
			"description": "Demo action agent ID"
		},
		{
			"key": "session_id",
			"value": "audit_fix_1753654416_abc123",
			"description": "Demo audit fixing session ID"
		},
		{
			"key": "coordination_id",
			"value": "coord_1753654416_ghi789",
			"description": "Demo A2A coordination ID"
		},
		{
			"key": "conversation_id",
			"value": "conv_user_demo_1753654416_abc123",
			"description": "Demo conversation ID"
    }
  ],
  "item": [
    {
			"name": "System Status",
      "item": [
        {
					"name": "Root - System Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
              "path": [""]
            }
          },
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"system\": \"NIS Protocol v3.1\",\n  \"version\": \"3.1.0-archaeological\",\n  \"pattern\": \"OpenAIZChallenge Archaeological Discovery Platform\",\n  \"status\": \"operational\",\n  \"real_llm_integrated\": true,\n  \"provider\": \"anthropic\",\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"features\": [\n    \"Real LLM Integration (OpenAI, Anthropic)\",\n    \"Archaeological Discovery Patterns\",\n    \"Multi-Agent Coordination\",\n    \"Physics-Informed Reasoning\",\n    \"Consciousness Modeling\",\n    \"Cultural Heritage Analysis\",\n    \"Third-Party Protocol Integration\",\n    \"Automated Audit Fixing\"\n  ],\n  \"archaeological_success\": \"Proven patterns from successful heritage platform\",\n  \"timestamp\": 1753654416.629\n}"
						}
					]
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
					"response": [
        {
							"name": "Healthy System",
							"originalRequest": {
            "method": "GET",
            "header": [],
								"url": "{{base_url}}/health"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
            "header": [],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": 1753654416.629,\n  \"provider\": \"anthropic\",\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"real_ai\": true,\n  \"conversations_active\": 3,\n  \"agents_registered\": 9,\n  \"tools_available\": 7,\n  \"pattern\": \"archaeological_discovery\"\n}"
						}
					]
        }
      ]
    },
    {
			"name": "Chat & Conversation",
      "item": [
        {
					"name": "Enhanced Chat with Real LLM",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"message\": \"How does the consciousness modeling work in NIS Protocol?\",\n  \"user_id\": \"user_demo\",\n  \"conversation_id\": null,\n  \"context\": {\n    \"domain\": \"consciousness\",\n    \"priority\": \"high\",\n    \"session_type\": \"technical_discussion\"\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/chat",
							"host": ["{{base_url}}"],
							"path": ["chat"]
						}
					},
					"response": [
						{
							"name": "Successful Chat Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"message\": \"How does consciousness modeling work?\",\n  \"user_id\": \"user_demo\"\n}"
								},
								"url": "{{base_url}}/chat"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"response\": \"The consciousness modeling in NIS Protocol uses enhanced meta-cognitive processing with real-time introspection capabilities. It includes self-reflection, bias detection, and integrity monitoring through our consciousness agents.\",\n  \"user_id\": \"user_demo\",\n  \"conversation_id\": \"conv_user_demo_1753654416_abc123\",\n  \"timestamp\": 1753654416.629,\n  \"confidence\": 0.92,\n  \"provider\": \"anthropic\",\n  \"real_ai\": true,\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"tokens_used\": 245,\n  \"reasoning_trace\": [\n    \"archaeological_pattern\",\n    \"context_analysis\",\n    \"llm_generation\", \n    \"response_synthesis\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Chat with Context",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"message\": \"Can you explain how the third-party protocol integration works?\",\n  \"user_id\": \"user_demo\",\n  \"conversation_id\": \"conv_user_demo_1753654416_abc123\",\n  \"context\": {\n    \"domain\": \"protocols\",\n    \"previous_topic\": \"consciousness_modeling\",\n    \"technical_level\": \"advanced\"\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/chat",
							"host": ["{{base_url}}"],
              "path": ["chat"]
            }
					}
        },
        {
          "name": "Async Streaming Chat",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {"mode": "raw", "raw": "{\"message\": \"Test async chat\"}"},
            "url": {
							"raw": "{{base_url}}/chat/async",
							"host": ["{{base_url}}"],
							"path": ["chat", "async"]
						}
					},
					"response": [
						{
							"name": "Async Chat Response",
							"originalRequest": {
								"method": "POST",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {"mode": "raw", "raw": "{\"message\": \"Test async chat\"}"},
								"url": "{{base_url}}/chat/async"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"message\": \"Test async chat\",\n  \"user_id\": \"user_demo\",\n  \"conversation_id\": \"conv_user_demo_1753654416_abc123\",\n  \"timestamp\": 1753654416.629,\n  \"confidence\": 0.92,\n  \"provider\": \"anthropic\",\n  \"real_ai\": true,\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"tokens_used\": 245,\n  \"reasoning_trace\": [\n    \"archaeological_pattern\",\n    \"context_analysis\",\n    \"llm_generation\", \n    \"response_synthesis\"\n  ]\n}"
						}
					]
				}
      ]
    },
    {
			"name": "Agent Management",
      "item": [
        {
					"name": "Create Consciousness Agent",
          "request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_type\": \"consciousness\",\n  \"capabilities\": [\"self_reflection\", \"meta_cognition\", \"integrity_monitoring\", \"codebase_scanning\"],\n  \"memory_size\": 1000,\n  \"tools\": [\"audit_scanner\", \"violation_detector\", \"integrity_assessor\"],\n  \"config\": {\n    \"enable_self_audit\": true,\n    \"reflection_interval\": 60.0,\n    \"consciousness_level\": \"enhanced\",\n    \"proactive_scanning\": true\n  }\n}"
						},
            "url": {
							"raw": "{{base_url}}/agent/create",
							"host": ["{{base_url}}"],
							"path": ["agent", "create"]
						}
					},
					"response": [
						{
							"name": "Agent Created Successfully",
							"originalRequest": {
            "method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agent_type\": \"consciousness\",\n  \"capabilities\": [\"self_reflection\", \"meta_cognition\"]\n}"
								},
								"url": "{{base_url}}/agent/create"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"agent_id\": \"agent_consciousness_1753654416_e734c5c4\",\n  \"status\": \"created\",\n  \"agent_type\": \"consciousness\",\n  \"capabilities\": [\"self_reflection\", \"meta_cognition\", \"integrity_monitoring\"],\n  \"real_ai_backed\": true,\n  \"provider\": \"anthropic\",\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"pattern\": \"archaeological_discovery\",\n  \"created_at\": 1753654416.629\n}"
        }
      ]
    },
    {
					"name": "Create Action Agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"agent_type\": \"action\",\n  \"capabilities\": [\"audit_fixing\", \"code_modification\", \"file_manipulation\", \"tool_integration\"],\n  \"memory_size\": 500,\n  \"tools\": [\"file_editor\", \"code_formatter\", \"lint_checker\"],\n  \"config\": {\n    \"enable_third_party_tools\": true,\n    \"protocols\": [\"mcp\", \"acp\", \"a2a\"],\n    \"auto_fix_enabled\": true,\n    \"audit_integration\": true\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/agent/create",
							"host": ["{{base_url}}"],
							"path": ["agent", "create"]
						}
					}
				},
        {
          "name": "List All Agents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
							"raw": "{{base_url}}/agents",
							"host": ["{{base_url}}"],
              "path": ["agents"]
            }
          },
					"response": [
						{
							"name": "Agents List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/agents"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"agents\": {\n    \"agent_consciousness_1753654416_e734c5c4\": {\n      \"agent_id\": \"agent_consciousness_1753654416_e734c5c4\",\n      \"agent_type\": \"consciousness\",\n      \"capabilities\": [\"self_reflection\", \"meta_cognition\"],\n      \"status\": \"active\",\n      \"real_ai_backed\": true,\n      \"provider\": \"anthropic\"\n    }\n  },\n  \"total_count\": 9,\n  \"active_agents\": 9,\n  \"real_ai_backed\": 9,\n  \"pattern\": \"archaeological_discovery\",\n  \"provider_distribution\": {\n    \"anthropic\": 3,\n    \"deepseek\": 4,\n    \"google\": 2\n  }\n}"
						}
					]
				},
        {
          "name": "Set Agent Behavior Mode",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {"mode": "raw", "raw": "{\"mode\": \"hyperactive\"}"},
            "url": {
							"raw": "{{base_url}}/agent/behavior/{{consciousness_agent_id}}",
							"host": ["{{base_url}}"],
							"path": ["agent", "behavior", "{{consciousness_agent_id}}"]
						}
					},
					"response": [
						{
							"name": "Behavior Updated",
							"originalRequest": {
								"method": "POST",
								"header": [{"key": "Content-Type", "value": "application/json"}],
								"body": {"mode": "raw", "raw": "{\"mode\": \"hyperactive\"}"},
								"url": "{{base_url}}/agent/behavior/agent_consciousness_1753654416_e734c5c4"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\"agent_id\": \"agent_123\", \"behavior_mode\": \"hyperactive\", \"status\": \"updated\"}"
						}
					]
				}
			]
		},
		{
			"name": "Action Agent & Audit Fixing",
			"item": [
				{
					"name": "Start Audit Fixing Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"target_directories\": [\"src/\", \"examples/\"],\n  \"fix_strategies\": [\n    \"hardcoded_value_replacement\",\n    \"hype_language_correction\",\n    \"documentation_update\"\n  ],\n  \"use_third_party_tools\": true,\n  \"protocols\": [\"mcp\", \"acp\"],\n  \"auto_apply_fixes\": true,\n  \"backup_files\": true,\n  \"session_config\": {\n    \"max_fixes_per_file\": 10,\n    \"timeout_seconds\": 300,\n    \"parallel_processing\": true\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/action/audit-fix",
							"host": ["{{base_url}}"],
							"path": ["agent", "action", "audit-fix"]
						}
					},
					"response": [
						{
							"name": "Audit Fixing Session Started",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"target_directories\": [\"src/\"],\n  \"use_third_party_tools\": true\n}"
								},
								"url": "{{base_url}}/agent/action/audit-fix"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"session_id\": \"audit_fix_1753654416_abc123\",\n  \"status\": \"started\",\n  \"violations_detected\": 12,\n  \"fixes_scheduled\": 12,\n  \"third_party_tools\": [\"file_editor_tool\", \"language_correction_agent\"],\n  \"protocols_used\": [\"mcp\", \"acp\"],\n  \"estimated_duration\": \"30s\",\n  \"agent_id\": \"agent_action_1753654416_xyz789\"\n}"
						}
					]
				},
				{
					"name": "Get Audit Fixing Session Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/agent/action/audit-fix/{{session_id}}",
							"host": ["{{base_url}}"],
							"path": ["agent", "action", "audit-fix", "{{session_id}}"]
						}
					},
					"response": [
						{
							"name": "Session Completed",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/agent/action/audit-fix/audit_fix_1753654416_abc123"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"session_id\": \"audit_fix_1753654416_abc123\",\n  \"status\": \"completed\",\n  \"duration\": 28.5,\n  \"violations_detected\": 12,\n  \"violations_fixed\": 11,\n  \"violations_failed\": 1,\n  \"success_rate\": 0.92,\n  \"files_modified\": [\"src/agents/physics/physics_agent.py\", \"simple_real_chat_test.py\"],\n  \"fixes_by_type\": {\n    \"hardcoded_value\": 8,\n    \"hype_language\": 3,\n    \"documentation_update\": 1\n  },\n  \"tools_used\": [\"mcp:file_editor_tool\", \"acp:language_correction_agent\"],\n  \"audit_trail\": [\n    {\n      \"file\": \"simple_real_chat_test.py\",\n      \"violation\": \"confidence=0.95\",\n      \"fix\": \"confidence=calculate_confidence(factors)\",\n      \"tool\": \"mcp:file_editor_tool\",\n      \"success\": true,\n      \"timestamp\": 1753654416.629\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "List Audit Fixing Sessions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/agent/action/audit-fix?status=all&limit=10",
							"host": ["{{base_url}}"],
							"path": ["agent", "action", "audit-fix"],
							"query": [
								{
									"key": "status",
									"value": "all"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Consciousness Agent Introspection",
			"item": [
				{
					"name": "Trigger Introspection - Integrity Assessment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"reflection_type\": \"integrity_assessment\",\n  \"target_agent_id\": null,\n  \"context\": {\n    \"scan_codebase\": true,\n    \"target_directories\": [\"src/\", \"examples/\"],\n    \"scan_depth\": \"deep\",\n    \"include_documentation\": true\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/{{consciousness_agent_id}}/introspect",
							"host": ["{{base_url}}"],
							"path": ["agent", "{{consciousness_agent_id}}", "introspect"]
						}
					},
					"response": [
						{
							"name": "Introspection Result",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"reflection_type\": \"integrity_assessment\"\n}"
								},
								"url": "{{base_url}}/agent/agent_consciousness_1753654416_e734c5c4/introspect"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"introspection_id\": \"intro_1753654416_xyz789\",\n  \"reflection_type\": \"integrity_assessment\",\n  \"agent_id\": \"agent_consciousness_1753654416_e734c5c4\",\n  \"findings\": {\n    \"integrity_score\": 95.2,\n    \"violations_detected\": 3,\n    \"codebase_health\": \"excellent\",\n    \"recommendations\": [\n      \"Fix hardcoded confidence values in simple_real_chat_test.py\",\n      \"Update hype language in documentation\"\n    ]\n  },\n  \"confidence\": 0.94,\n  \"processing_time\": 1.2,\n  \"auto_corrections_applied\": 0,\n  \"violations_found\": [\n    {\n      \"type\": \"hardcoded_value\",\n      \"file\": \"simple_real_chat_test.py\",\n      \"severity\": \"HIGH\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Proactive Codebase Scan",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"target_directories\": [\"src/\", \"examples/\"],\n  \"scan_depth\": \"deep\",\n  \"auto_fix\": false,\n  \"include_tests\": true,\n  \"include_documentation\": true,\n  \"violation_types\": [\"hardcoded_value\", \"hype_language\", \"unsubstantiated_claim\"]\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/{{consciousness_agent_id}}/codebase-scan",
							"host": ["{{base_url}}"],
							"path": ["agent", "{{consciousness_agent_id}}", "codebase-scan"]
						}
					},
					"response": [
						{
							"name": "Codebase Scan Results",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"target_directories\": [\"src/\"]\n}"
								},
								"url": "{{base_url}}/agent/agent_consciousness_1753654416_e734c5c4/codebase-scan"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"scan_id\": \"scan_1753654416_def456\",\n  \"agent_id\": \"agent_consciousness_1753654416_e734c5c4\",\n  \"total_files_scanned\": 45,\n  \"total_violations\": 8,\n  \"violations_by_type\": {\n    \"hardcoded_value\": 5,\n    \"hype_language\": 2,\n    \"unsubstantiated_claim\": 1\n  },\n  \"critical_issues\": 5,\n  \"integrity_score\": 88.3,\n  \"scan_timestamp\": 1753654416.629,\n  \"recommendations\": [\n    \"Run automated fixing session to address hardcoded values\",\n    \"Review documentation for unsubstantiated claims\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Performance Review",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"reflection_type\": \"performance_review\",\n  \"target_agent_id\": \"agent_action_1753654416_xyz789\",\n  \"context\": {\n    \"review_period\": \"last_24h\",\n    \"metrics\": [\"response_time\", \"success_rate\", \"tool_usage\"]\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/{{consciousness_agent_id}}/introspect",
							"host": ["{{base_url}}"],
							"path": ["agent", "{{consciousness_agent_id}}", "introspect"]
						}
					}
        }
      ]
    },
    {
			"name": "Third-Party Protocol Integration",
			"item": [
				{
					"name": "MCP Tools",
      "item": [
        {
							"name": "Execute MCP File Editor Tool",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
									"raw": "{\n  \"tool_name\": \"file_editor_tool\",\n  \"action\": \"replace_text\",\n  \"parameters\": {\n    \"file_path\": \"src/test.py\",\n    \"old_text\": \"confidence=0.95\",\n    \"new_text\": \"confidence=calculate_confidence(factors)\",\n    \"backup\": true\n  },\n  \"context\": {\n    \"violation_type\": \"hardcoded_value\",\n    \"session_id\": \"audit_fix_1753654416_abc123\",\n    \"agent_id\": \"agent_action_1753654416_xyz789\"\n  }\n}"
            },
            "url": {
									"raw": "{{base_url}}/protocol/mcp/tool/execute",
									"host": ["{{base_url}}"],
									"path": ["protocol", "mcp", "tool", "execute"]
								}
							},
							"response": [
								{
									"name": "MCP Tool Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tool_name\": \"file_editor_tool\",\n  \"action\": \"replace_text\",\n  \"parameters\": {\n    \"file_path\": \"src/test.py\",\n    \"old_text\": \"confidence=0.95\",\n    \"new_text\": \"confidence=calculate_confidence(factors)\"\n  }\n}"
										},
										"url": "{{base_url}}/protocol/mcp/tool/execute"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n  \"tool_response\": {\n    \"status\": \"success\",\n    \"content\": {\n      \"file_modified\": \"src/test.py\",\n      \"changes_applied\": 1,\n      \"backup_created\": true,\n      \"backup_path\": \"src/test.py.backup.1753654416\"\n    },\n    \"error\": null\n  },\n  \"execution_time\": 0.8,\n  \"protocol\": \"mcp\",\n  \"tool_name\": \"file_editor_tool\"\n}"
								}
							]
						},
						{
							"name": "Execute MCP Code Formatter Tool",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
									"raw": "{\n  \"tool_name\": \"code_formatter_tool\",\n  \"action\": \"format_file\",\n  \"parameters\": {\n    \"file_path\": \"src/test.py\",\n    \"style\": \"pep8\",\n    \"max_line_length\": 88\n  }\n}"
            },
            "url": {
									"raw": "{{base_url}}/protocol/mcp/tool/execute",
									"host": ["{{base_url}}"],
									"path": ["protocol", "mcp", "tool", "execute"]
								}
							}
						},
						{
							"name": "List Available MCP Tools",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protocol/mcp/tools",
									"host": ["{{base_url}}"],
									"path": ["protocol", "mcp", "tools"]
								}
							}
        }
      ]
    },
    {
					"name": "ACP Agents",
      "item": [
        {
							"name": "Communicate with ACP Language Correction Agent",
          "request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agent_id\": \"language_correction_agent\",\n  \"message\": {\n    \"action\": \"detect_hype_language\",\n    \"content\": \"This is a sophisticated advanced system with perfect accuracy and revolutionary breakthrough capabilities\",\n    \"context\": \"code_documentation\",\n    \"target_standards\": [\"professional\", \"evidence_based\", \"measurable\"]\n  }\n}"
								},
            "url": {
									"raw": "{{base_url}}/protocol/acp/agent/communicate",
									"host": ["{{base_url}}"],
									"path": ["protocol", "acp", "agent", "communicate"]
								}
							},
							"response": [
								{
									"name": "ACP Language Correction",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"agent_id\": \"language_correction_agent\",\n  \"message\": {\n    \"action\": \"detect_hype_language\",\n    \"content\": \"This is a sophisticated advanced system with perfect accuracy\"\n  }\n}"
										},
										"url": "{{base_url}}/protocol/acp/agent/communicate"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n  \"agent_response\": {\n    \"violations_detected\": 4,\n    \"suggestions\": [\n      {\"original\": \"sophisticated\", \"replacement\": \"comprehensive\", \"reason\": \"more evidence-based\"},\n      {\"original\": \"advanced\", \"replacement\": \"well-engineered\", \"reason\": \"measurable claim\"},\n      {\"original\": \"perfect\", \"replacement\": \"high\", \"reason\": \"avoid absolute claims\"},\n      {\"original\": \"revolutionary\", \"replacement\": \"significant\", \"reason\": \"professional tone\"}\n    ],\n    \"confidence\": 0.91,\n    \"corrected_text\": \"This is a comprehensive well-engineered system with high accuracy and significant breakthrough capabilities\"\n  },\n  \"protocol\": \"acp\",\n  \"agent_id\": \"language_correction_agent\"\n}"
								}
							]
						},
						{
							"name": "Quality Assurance Agent Review",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
									"raw": "{\n  \"agent_id\": \"quality_assurance_agent\",\n  \"message\": {\n    \"action\": \"code_review\",\n    \"code\": \"def example():\\n    confidence = 0.95\\n    return confidence\",\n    \"standards\": [\"pep8\", \"security\", \"performance\", \"maintainability\"],\n    \"context\": \"audit_violation_fix\"\n  }\n}"
            },
            "url": {
									"raw": "{{base_url}}/protocol/acp/agent/communicate",
									"host": ["{{base_url}}"],
									"path": ["protocol", "acp", "agent", "communicate"]
								}
							}
						}
					]
				},
				{
					"name": "A2A Coordination",
					"item": [
						{
							"name": "Cross-Platform Agent Coordination",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
									"raw": "{\n  \"target_platform\": \"external_qa_system\",\n  \"coordination_type\": \"multi_agent_workflow\",\n  \"workflow\": {\n    \"task\": \"automated_code_review_and_documentation\",\n    \"agents_required\": [\"code_analyzer\", \"quality_checker\", \"documentation_updater\"],\n    \"parallel_execution\": true,\n    \"timeout_minutes\": 10\n  },\n  \"context\": {\n    \"project\": \"nis_protocol_v3\",\n    \"priority\": \"high\",\n    \"auto_apply_fixes\": false\n  }\n}"
            },
            "url": {
									"raw": "{{base_url}}/protocol/a2a/coordinate",
									"host": ["{{base_url}}"],
									"path": ["protocol", "a2a", "coordinate"]
								}
							},
							"response": [
								{
									"name": "A2A Coordination Started",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"target_platform\": \"external_system\",\n  \"coordination_type\": \"multi_agent_workflow\",\n  \"workflow\": {\n    \"task\": \"automated_code_review\"\n  }\n}"
										},
										"url": "{{base_url}}/protocol/a2a/coordinate"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n  \"coordination_id\": \"coord_1753654416_ghi789\",\n  \"status\": \"initiated\",\n  \"participating_agents\": 3,\n  \"external_platform\": \"external_qa_system\",\n  \"workflow_stages\": [\n    {\"stage\": \"code_analysis\", \"agent\": \"code_analyzer\", \"status\": \"queued\"},\n    {\"stage\": \"quality_check\", \"agent\": \"quality_checker\", \"status\": \"pending\"},\n    {\"stage\": \"documentation\", \"agent\": \"documentation_updater\", \"status\": \"pending\"}\n  ],\n  \"protocol\": \"a2a\",\n  \"estimated_completion\": \"2025-01-19T10:45:00Z\"\n}"
								}
							]
						},
						{
							"name": "Get A2A Coordination Status",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protocol/a2a/coordinate/{{coordination_id}}",
									"host": ["{{base_url}}"],
									"path": ["protocol", "a2a", "coordinate", "{{coordination_id}}"]
								}
							}
						}
					]
				},
				{
					"name": "Protocol Health Checks",
					"item": [
						{
							"name": "MCP Health Check",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protocol/mcp/health",
									"host": ["{{base_url}}"],
									"path": ["protocol", "mcp", "health"]
								}
							}
						},
						{
							"name": "ACP Health Check",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protocol/acp/health",
									"host": ["{{base_url}}"],
									"path": ["protocol", "acp", "health"]
								}
							}
						},
						{
							"name": "A2A Health Check",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/protocol/a2a/health",
									"host": ["{{base_url}}"],
									"path": ["protocol", "a2a", "health"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "Memory & Knowledge Management",
			"item": [
				{
					"name": "Store Memory",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"key\": \"audit_findings_2025_01\",\n  \"data\": {\n    \"violations\": 8,\n    \"fixes_applied\": 7,\n    \"success_rate\": 0.875,\n    \"tools_used\": [\"mcp:file_editor_tool\", \"acp:language_correction_agent\"],\n    \"session_duration\": 28.5\n  },\n  \"agent_id\": \"agent_consciousness_1753654416_e734c5c4\",\n  \"memory_type\": \"episodic\",\n  \"retention_days\": 30,\n  \"tags\": [\"audit\", \"integrity\", \"automated_fixing\"]\n}"
            },
            "url": {
							"raw": "{{base_url}}/memory/store",
							"host": ["{{base_url}}"],
							"path": ["memory", "store"]
						}
					}
				},
				{
					"name": "Query Memory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/memory/query?key=audit_findings_2025_01&agent_id={{consciousness_agent_id}}&memory_type=episodic",
							"host": ["{{base_url}}"],
							"path": ["memory", "query"],
							"query": [
								{
									"key": "key",
									"value": "audit_findings_2025_01"
								},
								{
									"key": "agent_id",
									"value": "{{consciousness_agent_id}}"
								},
								{
									"key": "memory_type",
									"value": "episodic"
								}
							]
						}
					}
        }
      ]
    },
    {
			"name": "Tool Management",
      "item": [
        {
					"name": "Register Third-Party Tool",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tool_name\": \"advanced_code_analyzer\",\n  \"description\": \"Advanced static code analysis tool with ML-powered vulnerability detection\",\n  \"capabilities\": [\n    \"syntax_analysis\",\n    \"complexity_metrics\", \n    \"vulnerability_detection\",\n    \"performance_analysis\",\n    \"code_quality_scoring\"\n  ],\n  \"protocol\": \"mcp\",\n  \"endpoint\": \"https://api.example.com/code-analyzer\",\n  \"authentication\": {\n    \"type\": \"api_key\",\n    \"key_env_var\": \"CODE_ANALYZER_API_KEY\"\n  },\n  \"version\": \"2.1.0\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tool/register",
							"host": ["{{base_url}}"],
							"path": ["tool", "register"]
						}
					}
				},
				{
					"name": "List Available Tools",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tools",
							"host": ["{{base_url}}"],
							"path": ["tools"]
						}
					},
					"response": [
						{
							"name": "Tools List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/tools"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"tools\": {\n    \"calculator\": {\"description\": \"Mathematical calculator\", \"status\": \"active\"},\n    \"web_search\": {\"description\": \"Web search capabilities\", \"status\": \"active\"},\n    \"artifact_analysis\": {\"description\": \"Archaeological artifact analysis\", \"status\": \"active\"},\n    \"file_editor_tool\": {\"description\": \"MCP file editing tool\", \"protocol\": \"mcp\", \"status\": \"active\"},\n    \"language_correction_agent\": {\"description\": \"ACP language correction\", \"protocol\": \"acp\", \"status\": \"active\"},\n    \"advanced_code_analyzer\": {\"description\": \"Advanced static code analysis\", \"protocol\": \"mcp\", \"status\": \"active\"}\n  },\n  \"total_tools\": 6,\n  \"active_tools\": 6,\n  \"protocol_distribution\": {\n    \"native\": 3,\n    \"mcp\": 2,\n    \"acp\": 1\n  }\n}"
						}
					]
				},
				{
					"name": "Execute Tool",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"tool_name\": \"calculator\",\n  \"operation\": \"calculate\",\n  \"parameters\": {\n    \"expression\": \"2 + 2 * 3\",\n    \"precision\": 2\n  }\n}"
            },
            "url": {
							"raw": "{{base_url}}/tool/execute",
							"host": ["{{base_url}}"],
							"path": ["tool", "execute"]
						}
					}
				}
			]
		},
		{
			"name": "Monitoring & Dashboard",
			"item": [
				{
					"name": "Get Real-Time Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dashboard/metrics",
							"host": ["{{base_url}}"],
							"path": ["dashboard", "metrics"]
						}
					},
					"response": [
						{
							"name": "System Metrics",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_url}}/dashboard/metrics"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"metrics\": {\n    \"consciousness_response_time\": {\n      \"current_value\": 0.85,\n      \"target_value\": 1.0,\n      \"unit\": \"seconds\",\n      \"alert_level\": \"normal\"\n    },\n    \"memory_usage\": {\n      \"current_value\": 67.2,\n      \"target_value\": 80.0,\n      \"unit\": \"percent\",\n      \"alert_level\": \"normal\"\n    },\n    \"decision_quality\": {\n      \"current_value\": 0.92,\n      \"target_value\": 0.85,\n      \"unit\": \"score\",\n      \"alert_level\": \"excellent\"\n    },\n    \"audit_violations_per_hour\": {\n      \"current_value\": 2.1,\n      \"target_value\": 5.0,\n      \"unit\": \"count\",\n      \"alert_level\": \"excellent\"\n    }\n  },\n  \"system_health\": \"excellent\",\n  \"uptime\": 3847.2,\n  \"active_sessions\": {\n    \"audit_fixing\": 0,\n    \"consciousness_scans\": 1,\n    \"protocol_integrations\": 3\n  }\n}"
						}
					]
				},
				{
					"name": "Get Protocol Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dashboard/protocols",
							"host": ["{{base_url}}"],
							"path": ["dashboard", "protocols"]
						}
					}
				},
				{
					"name": "Get Agent Performance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dashboard/agents",
							"host": ["{{base_url}}"],
							"path": ["dashboard", "agents"]
						}
					}
				}
			]
		},
		{
			"name": "Error Handling & Testing",
			"item": [
				{
					"name": "Test Invalid Agent Creation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"agent_type\": \"invalid_type\",\n  \"capabilities\": [\"invalid_capability\"]\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/create",
							"host": ["{{base_url}}"],
							"path": ["agent", "create"]
						}
					},
					"response": [
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"agent_type\": \"invalid_type\"\n}"
								},
								"url": "{{base_url}}/agent/create"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"detail\": \"Agent creation failed: Invalid agent type 'invalid_type'\",\n  \"error_type\": \"ValidationError\",\n  \"timestamp\": 1753654416.629,\n  \"allowed_types\": [\"consciousness\", \"action\", \"reasoning\", \"memory\", \"physics\"]\n}"
						}
					]
				},
				{
					"name": "Test Nonexistent Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
							"raw": "{\n  \"reflection_type\": \"performance_review\"\n}"
            },
            "url": {
							"raw": "{{base_url}}/agent/nonexistent_agent_id/introspect",
							"host": ["{{base_url}}"],
							"path": ["agent", "nonexistent_agent_id", "introspect"]
						}
					},
					"response": [
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": "{{base_url}}/agent/nonexistent_agent_id/introspect"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n  \"detail\": \"Agent 'nonexistent_agent_id' not found\",\n  \"error_type\": \"NotFoundError\",\n  \"timestamp\": 1753654416.629\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set variables for demo",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost');",
					"}",
					"",
					"if (!pm.environment.get('direct_url')) {",
					"    pm.environment.set('direct_url', 'http://localhost:8000');",
					"}",
					"",
					"// Set demo agent IDs if not already set",
					"if (!pm.environment.get('consciousness_agent_id')) {",
					"    pm.environment.set('consciousness_agent_id', 'agent_consciousness_1753654416_e734c5c4');",
					"}",
					"",
					"if (!pm.environment.get('session_id')) {",
					"    pm.environment.set('session_id', 'audit_fix_1753654416_abc123');",
					"}",
					"",
					"if (!pm.environment.get('coordination_id')) {",
					"    pm.environment.set('coordination_id', 'coord_1753654416_ghi789');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-capture response data for subsequent requests",
					"if (pm.response.code === 200) {",
					"    const responseJson = pm.response.json();",
					"    ",
					"    // Capture agent IDs",
					"    if (responseJson.agent_id) {",
					"        pm.environment.set('last_agent_id', responseJson.agent_id);",
					"        ",
					"        // Set specific agent type variables",
					"        if (responseJson.agent_type === 'consciousness') {",
					"            pm.environment.set('consciousness_agent_id', responseJson.agent_id);",
					"        } else if (responseJson.agent_type === 'action') {",
					"            pm.environment.set('action_agent_id', responseJson.agent_id);",
					"        }",
					"    }",
					"    ",
					"    // Capture session IDs",
					"    if (responseJson.session_id) {",
					"        pm.environment.set('session_id', responseJson.session_id);",
					"    }",
					"    ",
					"    // Capture coordination IDs",
					"    if (responseJson.coordination_id) {",
					"        pm.environment.set('coordination_id', responseJson.coordination_id);",
					"    }",
					"    ",
					"    // Capture conversation IDs",
					"    if (responseJson.conversation_id) {",
					"        pm.environment.set('conversation_id', responseJson.conversation_id);",
					"    }",
					"}",
					"",
					"// Standard response validation",
					"pm.test('Response status is successful', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.have.jsonBody();",
					"});",
					"",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});"
				]
			}
    }
  ]
} 