{
  "schema_version": "1.0",
  "name": "NIS Protocol MCP Server",
  "description": "Physics-validated AI system with KAN, PINN, Laplace transforms, and multi-agent orchestration",
  "version": "3.2.5",
  "server": {
    "command": "python",
    "args": ["-m", "src.mcp.standalone_server"],
    "env": {
      "PYTHONPATH": ".",
      "NIS_MCP_MODE": "standalone",
      "NIS_PROVIDER_REGISTRY": "configs/provider_registry.yaml",
      "NIS_PROTOCOL_ROUTING": "configs/protocol_routing.json"
    },
    "working_directory": "${NIS_PROJECT_ROOT:-/opt/nis-protocol}"
  },
  "tools": [
    {
      "name": "nis.run_pipeline",
      "description": "Execute NIS Protocol pipeline (Laplace → KAN → PINN → LLM)",
      "parameters": {
        "type": "object",
        "properties": {
          "pipeline_type": {
            "type": "string",
            "enum": ["signal_processing", "physics_validation", "robotics_control", "research_analysis"],
            "description": "Type of NIS pipeline to run"
          },
          "input_data": {
            "type": "object",
            "description": "Input data for the pipeline"
          },
          "budget_usd": {
            "type": "number",
            "description": "Maximum spend in USD",
            "minimum": 0,
            "maximum": 100
          }
        },
        "required": ["pipeline_type", "input_data"]
      }
    },
    {
      "name": "nis.job_status",
      "description": "Get status and metrics for a running job",
      "parameters": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "Job ID returned from run_pipeline"
          }
        },
        "required": ["job_id"]
      }
    },
    {
      "name": "nis.get_artifact",
      "description": "Fetch outputs from completed job",
      "parameters": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "artifact_name": {
            "type": "string",
            "description": "Name of artifact (e.g., 'result', 'physics_validation', 'trajectory')"
          }
        },
        "required": ["job_id", "artifact_name"]
      }
    },
    {
      "name": "nis.cost_report",
      "description": "Get compute cost and GPU usage report",
      "parameters": {
        "type": "object",
        "properties": {
          "window": {
            "type": "string",
            "enum": ["1h", "24h", "7d", "30d"],
            "description": "Time window for report",
            "default": "24h"
          }
        }
      }
    },
    {
      "name": "nis.list_capabilities",
      "description": "List available NIS Protocol capabilities",
      "parameters": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["agents", "pipelines", "providers", "all"],
            "default": "all"
          }
        }
      }
    },
    {
      "name": "nis.robotics_control",
      "description": "Control robotics systems (drones, manipulators)",
      "parameters": {
        "type": "object",
        "properties": {
          "robot_id": {
            "type": "string",
            "description": "Robot identifier"
          },
          "command_type": {
            "type": "string",
            "enum": ["forward_kinematics", "inverse_kinematics", "trajectory_planning"],
            "description": "Type of robotics command"
          },
          "parameters": {
            "type": "object",
            "description": "Command-specific parameters"
          }
        },
        "required": ["robot_id", "command_type", "parameters"]
      }
    }
  ],
  "authentication": {
    "type": "environment_variable",
    "variable": "NIS_MCP_API_KEY"
  },
  "rate_limits": {
    "requests_per_minute": 60,
    "concurrent_jobs": 5
  },
  "guardrails": {
    "max_budget_per_job_usd": 100,
    "max_job_duration_seconds": 3600,
    "allowed_artifacts": ["result", "physics_validation", "trajectory", "metrics", "logs"]
  }
}

